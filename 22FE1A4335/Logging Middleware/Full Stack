<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URL Shortener</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              sans: ['Inter', 'sans-serif'],
            },
          },
        },
      };
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="bg-white p-8 rounded-2xl shadow-xl w-full max-w-lg">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-2">URL Shortener</h1>
        <p class="text-center text-gray-500 mb-8">Create a short, memorable link for any URL.</p>

        <form id="url-form" class="space-y-6">
            <div>
                <label for="url" class="block text-sm font-medium text-gray-700">Original URL</label>
                <input type="url" id="url" name="url" required placeholder="https://example.com/very/long/url"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 ease-in-out">
            </div>

            <div>
                <label for="shortcode" class="block text-sm font-medium text-gray-700">Custom Shortcode (Optional)</label>
                <input type="text" id="shortcode" name="shortcode" placeholder="my-cool-link"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 ease-in-out">
            </div>

            <div>
                <label for="validity" class="block text-sm font-medium text-gray-700">Validity (minutes)</label>
                <input type="number" id="validity" name="validity" value="30" min="1"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 ease-in-out">
            </div>

            <div class="flex items-center justify-between">
                <button type="submit"
                    class="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                    Shorten URL
                </button>
            </div>
        </form>

        <div id="result-message" class="mt-8"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('url-form');
            const resultMessage = document.getElementById('result-message');
            
            function showMessageBox(message, type = 'info') {
                resultMessage.innerHTML = '';
                const messageBox = document.createElement('div');
                let bgColor, textColor, borderColor;

                switch (type) {
                    case 'success':
                        bgColor = 'bg-green-100';
                        textColor = 'text-green-700';
                        borderColor = 'border-green-400';
                        break;
                    case 'error':
                        bgColor = 'bg-red-100';
                        textColor = 'text-red-700';
                        borderColor = 'border-red-400';
                        break;
                    default:
                        bgColor = 'bg-blue-100';
                        textColor = 'text-blue-700';
                        borderColor = 'border-blue-400';
                        break;
                }

                messageBox.className = `p-4 rounded-lg border-l-4 ${bgColor} ${textColor} ${borderColor}`;
                messageBox.innerHTML = `<p class="font-medium">${message}</p>`;
                resultMessage.appendChild(messageBox);
            }

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const url = document.getElementById('url').value;
                const shortcode = document.getElementById('shortcode').value;
                const validity = parseInt(document.getElementById('validity').value, 10);

                const requestBody = {
                    url: url,
                    ...(shortcode && { shortcode: shortcode }),
                    ...(validity && { validity: validity })
                };

                const simulateResponse = async () => {
                    return new Promise(resolve => {
                        setTimeout(() => {
                            if (url.includes('error')) {
                                resolve({
                                    status: 400,
                                    body: {
                                        error: "Invalid URL or shortcode already in use."
                                    }
                                });
                            } else {
                                const now = new Date();
                                const expiryDate = new Date(now.getTime() + validity * 60 * 1000);
                                const mockShortcode = shortcode || Math.random().toString(36).substring(2, 8);
                                resolve({
                                    status: 201,
                                    body: {
                                        shortLink: `https://your-domain.com/${mockShortcode}`,
                                        expiry: expiryDate.toISOString()
                                    }
                                });
                            }
                        }, 1500);
                    });
                };

                showMessageBox("Processing...", 'info');

                try {
                    const response = await simulateResponse();

                    if (response.status === 201) {
                        const { shortLink, expiry } = response.body;
                        const expiryDate = new Date(expiry);
                        showMessageBox(`
                            <p class="mb-2">Your short link is ready!</p>
                            <p class="font-bold">Short Link: <a href="${shortLink}" target="_blank" class="text-indigo-600 hover:underline">${shortLink}</a></p>
                            <p class="text-sm text-gray-500">Expires: ${expiryDate.toLocaleString()}</p>
                        `, 'success');
                    } else {
                        const { error } = response.body;
                        showMessageBox(`Error: ${error}`, 'error');
                    }
                } catch (error) {
                    showMessageBox(`An unexpected error occurred: ${error.message}`, 'error');
                }
            });
        });
    </script>
</body>
</html>
